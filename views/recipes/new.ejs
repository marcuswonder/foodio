<%- include('../partials/header') %>

<div id="new-recipe">
  <div id="new-recipe-container">
    <div id="new-recipe-explainer">
      <p>Add one of your own recipes below, or use our recipe import tool to copy one from the internet:</p>
      <div id="new-recipe-import-button">
        <a id="import-recipe-page-link" method="GET" href="/recipes/import"><input type="submit" value="Import a Recipe" class="reg-button"/></a>
      </div>
    </div>
    <br>
    <h1>Add a Recipe</h1>
    <form method="POST" action="/recipes" enctype="multipart/form-data">
    
      <div id="new-recipe-header-container">
        
        <div id="new-recipe-name-container" class="new-recipe-header-input-container">
          <div class="new-recipe-title">
            <h3>Title</h3>
          </div>
          <div class="new-recipe-content">
            <textarea name="name" type="text" class="expanding-text-input" rows="1" autocomplete="off"></textarea>
          </div>
        </div>

        <div id="new-recipe-description-container" class="new-recipe-header-input-container">
          <div class="new-recipe-title">
            <h3>Description</h3>
          </div>
          <div class="new-recipe-content">
            <textarea name="description" type="text" class="expanding-text-input" rows="1" autocomplete="off"></textarea>
          </div>
        </div>
      </div>

      <br>
      <br>

      <div id="new-recipe-info-container">
        <div id="new-recipe-category-servings-container" class="new-recipe-info-container">
          <div id="new-recipe-category-container" class="new-recipe-input-container">
            <div class="new-recipe-title">
              <h3>Category</h3>
            </div>
              <div class="new-recipe-content">
                <select name="category" class="input">
                  <option value="Snack">Snack</option>
                  <option value="Starter">Starter</option>
                  <option value="Main Course">Main Course</option>
                  <option value="Dessert">Dessert</option>
                  <option value="Cocktail">Cocktail</option>
                </select>
              </div>
          </div>
        
          <div id="new-recipe-cookTime-container" class="new-recipe-input-container">
            <div class="new-recipe-title">
              <h3>Servings</h3>
            </div>
            <div class="new-recipe-content">
              <input name="servings" type="number"  class="short-input" autocomplete="off"></input>
            </div>
          </div>
        </div>

        <div id="new-recipe-timings-container" class="new-recipe-info-container">
          <div id="new-recipe-prepTime-container" class="new-recipe-input-container">
            <div class="new-recipe-title">
              <h3>Prep Time</h3>
            </div>
            <div class="new-recipe-content">
              <input name="prepTime" type="number"  class="short-input" autocomplete="off"></input>
            </div>
            <p>(mins)</p>
          </div>

          <div id="new-recipe-cookTime-container" class="new-recipe-input-container">
            <div class="new-recipe-title">
              <h3>Cook Time</h3>
            </div>
            <div class="new-recipe-content">
              <input name="cookTime" type="number"  class="short-input" autocomplete="off"</input>
            </div>
            <p>(mins)</p>
          </div>
        </div>
      </div>


      <div id="new-recipe-ingredients-instructions-container">

        <div id="new-recipe-ingredients-container" class="new-recipe-ingredients-instructions-container">
          <div class="new-recipe-title">
            <h3>Ingredients</h3>
          </div>
            <div id="new-recipe-ingredients">
              <div class="new-recipe-ingredient-container">
                <ul>
                  <li>
                    <input name="ingredient" type="text" class="ingredient input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="ingredient-up">
                  <a type="button" class="ingredient-up" onclick="moveIngredientUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="ingredient-down">
                  <a type="button" class="ingredient-down" onclick="moveIngredientDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="ingredient-delete">
                  <a type="button" class="ingredient-delete" onclick="deleteIngredient(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
              <div class="new-recipe-ingredient-container">
                <ul>
                  <li>
                    <input name="ingredient" type="text" class="ingredient input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="ingredient-up">
                  <a type="button" class="ingredient-up" onclick="moveIngredientUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="ingredient-down">
                  <a type="button" class="ingredient-down" onclick="moveIngredientDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="ingredient-delete">
                  <a type="button" class="ingredient-delete" onclick="deleteIngredient(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
              <div class="new-recipe-ingredient-container">
                <ul>
                  <li>
                    <input name="ingredient" type="text" class="ingredient input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="ingredient-up">
                  <a type="button" class="ingredient-up" onclick="moveIngredientUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="ingredient-down">
                  <a type="button" class="ingredient-down" onclick="moveIngredientDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="ingredient-delete">
                  <a type="button" class="ingredient-delete" onclick="deleteIngredient(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
            </div>
          <div id="new-recipe-ingredient-add" class="new-recipe-add-buttons">
            <button type="button" class="reg-button" onclick="addIngredientField()">Add Ingredient</button>
          </div>
        </div>


          <div id="new-recipe-instructions-container" class="new-recipe-ingredients-instructions-container">
            <div class="new-recipe-title">
              <h3>Instructions</h3>
            </div>
            <div id="new-recipe-instructions">
              <div class="new-recipe-instruction-container">
                <ul>
                  <li>
                    <input name="instruction" type="text" class="instruction input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="instruction-up">
                  <a type="button" class="instruction-up" onclick="moveInstructionUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="instruction-down">
                  <a type="button" class="instruction-down" onclick="moveInstructionDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="instruction-delete">
                  <a type="button" class="instruction-delete" onclick="deleteInstruction(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
              <div class="new-recipe-instruction-container">
                <ul>
                  <li>
                    <input name="instruction" type="text" class="instruction input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="instruction-up">
                  <a type="button" class="instruction-up" onclick="moveInstructionUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="instruction-down">
                  <a type="button" class="instruction-down" onclick="moveInstructionDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="instruction-delete">
                  <a type="button" class="instruction-delete" onclick="deleteInstruction(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
              <div class="new-recipe-instruction-container">
                <ul>
                  <li>
                    <input name="instruction" type="text" class="instruction input" autocomplete="off"></input>
                  </li>
                </ul>
                <div class="instruction-up">
                  <a type="button" class="instruction-up" onclick="moveInstructionUp(this)"><span class="material-symbols-outlined">arrow_upward</span></a>
                </div>
                <div class="instruction-down">
                  <a type="button" class="instruction-down" onclick="moveInstructionDown(this)"><span class="material-symbols-outlined">arrow_downward</span></a>
                </div>
                <div class="instruction-delete">
                  <a type="button" class="instruction-delete" onclick="deleteInstruction(this)"><span class="material-symbols-outlined">delete</span></a>
                </div>
              </div>
            </div>
          <div id="new-recipe-instruction-add" class="new-recipe-add-buttons">
            <button type="button" class="reg-button" onclick="addInstructionField()">Add Instruction</button>
          </div>
        </div>
      </div>


      <div id="new-recipe-footer-container">
        
        <div id="new-recipe-photo-container" class="new-recipe-header-input-container">
          <div class="new-recipe-title">
            <h3>Photo</h3>
          </div>
          <div id="new-recipe-image-content">
            <div id="new-image-placeholder">
              <div id="new-image-placeholder-overlay-h3"><h3>Select a Photo</h3></div>
              <div id="new-image-placeholder-overlay-p">Or we will generate something beautiful using the magic of AI!</div>
            </div>
          </div>
          <div id="new-recipe-image-buttons">
            <div id="new-recipe-upload-photo-button-container" class="new-recipe-photo-button-containers">
              <label for="photo-for-upload" class="custom-file-upload">
                <div class="button-container">
                  <span class="reg-button">Choose a File</span>
                  <input id="photo-for-upload" type="file" name="photo" accept="image/*"></input>
                </div>
              </label>
            </div>
          </div>              
        </div>
      
      <br>
      <button id="new-recipe-save-button" type="submit" class="reg-button">Save Recipe</button>
    </form>
    
    <br>
  </div>
</div>

<div id="new-recipe-modal" class="modal">
  <div class="new-recipe-modal-content">
    <div id="new-recipe-modal-logo-container">
      <img id="new-recipe-modal-logo" class="spin" src="/public/images/Logo.png" alt="Foodio Logo">
    </div>

    <div id="new-recipe-modal-link-container">
      <h2>Saving your recipe</h2>
      <h4>Hang tight!</h4>
      <p>There's magic happening in this kitchen...</p>
    </div>
    
  </div>
</div>


<script>
  function addIngredientField() {
    const ingredientContainer = document.getElementById('new-recipe-ingredients')

    ingredient = document.createElement('div');
    ingredient.className = 'new-recipe-ingredient-container';

    // Create ul and append to main container
    let ul = document.createElement('ul');
    ingredient.appendChild(ul);

    // Create li, input and append to ul
    let li = document.createElement('li')
    let input = document.createElement('input')
    input.setAttribute('name', 'ingredient')
    input.setAttribute('type', 'text')
    input.setAttribute('autocomplete', 'off')
    input.className = 'ingredient input'
    li.appendChild(input)
    ul.appendChild(li)

   
    
    // Create ingredient-up div and append to main container
    let ingredientUp = document.createElement('div')
    ingredientUp.className = 'ingredient-up'
    let aUp = document.createElement('a')
    aUp.setAttribute('type', 'button')
    aUp.className = 'ingredient-up'
    aUp.setAttribute('onclick', 'moveIngredientUp(this)')
    let spanUp = document.createElement('span')
    spanUp.classList.add('material-symbols-outlined')
    spanUp.innerText = 'arrow_upward'
    aUp.appendChild(spanUp)
    ingredientUp.appendChild(aUp)
    ingredient.appendChild(ingredientUp)

    
    // Create ingredient-down div and append to main container
    let ingredientDown = document.createElement('div')
    ingredientDown.className = 'ingredient-down'
    let aDown = document.createElement('a')
    aDown.setAttribute('type', 'button')
    aDown.className = 'ingredient-down'
    aDown.setAttribute('onclick', 'moveIngredientDown(this)')
    let spanDown = document.createElement('span')
    spanDown.classList.add('material-symbols-outlined')
    spanDown.innerText = 'arrow_downward'
    aDown.appendChild(spanDown)
    ingredientDown.appendChild(aDown)
    ingredient.appendChild(ingredientDown)

    // Create ingredient-delete div and append to main container
    let ingredientDelete = document.createElement('div')
    ingredientDelete.className = 'ingredient-delete'
    let aDelete = document.createElement('a')
    aDelete.setAttribute('type', 'button')
    aDelete.className = 'ingredient-delete'
    aDelete.setAttribute('onclick', 'deleteIngredient(this)')
    let spanDelete = document.createElement('span')
    spanDelete.classList.add('material-symbols-outlined')
    spanDelete.innerText = 'delete'
    aDelete.appendChild(spanDelete)
    ingredientDelete.appendChild(aDelete)
    ingredient.appendChild(ingredientDelete)

    // Append the main container to the ingredientContainer
    ingredientContainer.appendChild(ingredient)

  }


  function addInstructionField() {
    const instructionContainer = document.getElementById('new-recipe-instructions')

    instruction = document.createElement('div');
    instruction.className = 'new-recipe-instruction-container';

    // Create ul and append to main container
    let ul = document.createElement('ul');
    instruction.appendChild(ul);

    // Create li, input and append to ul
    let li = document.createElement('li')
    let input = document.createElement('input')
    input.setAttribute('name', 'instruction')
    input.setAttribute('type', 'text')
    input.setAttribute('autocomplete', 'off')
    input.className = 'instruction input'
    li.appendChild(input)
    ul.appendChild(li)

    // Create instruction-up div and append to main container
    let instructionUp = document.createElement('div')
    instructionUp.className = 'instruction-up'
    let aUp = document.createElement('a')
    aUp.setAttribute('type', 'button')
    aUp.className = 'instruction-up'
    aUp.setAttribute('onclick', 'moveInstructionUp(this)')
    let spanUp = document.createElement('span')
    spanUp.classList.add('material-symbols-outlined')
    spanUp.innerText = 'arrow_upward'
    aUp.appendChild(spanUp)
    instructionUp.appendChild(aUp)
    instruction.appendChild(instructionUp)

    // Create instruction-down div and append to main container
    let instructionDown = document.createElement('div')
    instructionDown.className = 'instruction-down'
    let aDown = document.createElement('a')
    aDown.setAttribute('type', 'button')
    aDown.className = 'instruction-down'
    aDown.setAttribute('onclick', 'moveInstructionDown(this)')
    let spanDown = document.createElement('span')
    spanDown.classList.add('material-symbols-outlined')
    spanDown.innerText = 'arrow_downward'
    aDown.appendChild(spanDown)
    instructionDown.appendChild(aDown)
    instruction.appendChild(instructionDown)

    // Create instruction-delete div and append to main container
    let instructionDelete = document.createElement('div')
    instructionDelete.className = 'instruction-delete'
    let aDelete = document.createElement('a')
    aDelete.setAttribute('type', 'button')
    aDelete.className = 'instruction-delete'
    aDelete.setAttribute('onclick', 'deleteInstruction(this)')
    let spanDelete = document.createElement('span')
    spanDelete.classList.add('material-symbols-outlined')
    spanDelete.innerText = 'delete'
    aDelete.appendChild(spanDelete)
    instructionDelete.appendChild(aDelete)
    instruction.appendChild(instructionDelete)

    // Append the main container to the instructionContainer
    instructionContainer.appendChild(instruction)

  }

  function moveIngredientUp(clickedElement) {
    console.log("clickedElement", clickedElement)
    const inputElement = clickedElement.closest('.new-recipe-ingredient-container').querySelector('input[name="ingredient"]')
    const ingredientValue = inputElement.value

    const ingredientsHTML = document.getElementsByClassName('ingredient')
    
    let ingredients = []
    
    for (let i = 0; i < ingredientsHTML.length; i++) {
      const ingredient = ingredientsHTML[i];
      ingredients.push(ingredient.value)
    }
    
    const arrayIndexToMoveUp = ingredients.indexOf(ingredientValue)
    if(arrayIndexToMoveUp === 0) return
    
    const CSSindexToMoveUp = (arrayIndexToMoveUp + 1)
    console.log("CSSindexToMoveUp", CSSindexToMoveUp)
    
    const CSSindexToMoveBelow = (CSSindexToMoveUp - 1)
    console.log("CSSindexToMoveBelow", CSSindexToMoveBelow)

    const elementToMoveUp = document.querySelector(`#new-recipe-ingredients .new-recipe-ingredient-container:nth-child(${CSSindexToMoveUp})`)
    const elementToMoveBelow = document.querySelector(`#new-recipe-ingredients .new-recipe-ingredient-container:nth-child(${CSSindexToMoveBelow})`)
    
    const recipeIngredientsContainer = document.getElementById('new-recipe-ingredients')
    recipeIngredientsContainer.insertBefore(elementToMoveUp, elementToMoveBelow);
}

  function moveIngredientDown(clickedElement) {
    console.log("clickedElement", clickedElement)
    const inputElement = clickedElement.closest('.new-recipe-ingredient-container').querySelector('input[name="ingredient"]')
    const ingredientValue = inputElement.value

    const ingredientsHTML = document.getElementsByClassName('ingredient')

    let ingredients = []

    for (let i = 0; i < ingredientsHTML.length; i++) {
      const ingredient = ingredientsHTML[i];
      ingredients.push(ingredient.value)
    }
    
    const arrayIndexToMoveDown = ingredients.indexOf(ingredientValue)
    
    const CSSindexToMoveDown = (arrayIndexToMoveDown + 1)
    const CSSindexToMoveAbove = (CSSindexToMoveDown + 1)
    if(CSSindexToMoveDown === ingredients.length) return

    const elementToMoveDown = document.querySelector(`#new-recipe-ingredients .new-recipe-ingredient-container:nth-child(${CSSindexToMoveDown})`)
    const elementToMoveAbove = document.querySelector(`#new-recipe-ingredients .new-recipe-ingredient-container:nth-child(${CSSindexToMoveAbove})`)
    
    const recipeIngredientsContainer = document.getElementById('new-recipe-ingredients')
    recipeIngredientsContainer.insertBefore(elementToMoveAbove, elementToMoveDown);
  }
  
  function deleteIngredient(clickedElement) {
    console.log("clickedElement", clickedElement)
    const inputElement = clickedElement.closest('.new-recipe-ingredient-container').querySelector('input[name="ingredient"]')
    const ingredientValue = inputElement.value

    const ingredientsHTML = document.getElementsByClassName('ingredient')

    let ingredients = []

    for (let i = 0; i < ingredientsHTML.length; i++) {
      const ingredient = ingredientsHTML[i];
      ingredients.push(ingredient.value)
    }
    
    const arrayIndexToDelete = ingredients.indexOf(ingredientValue)    
    const CSSindexToDelete = (arrayIndexToDelete + 1)
    console.log("CSSindexToDelete", CSSindexToDelete)
    
    const elementToDelete = document.querySelector(`#new-recipe-ingredients .new-recipe-ingredient-container:nth-child(${CSSindexToDelete})`)
    console.log("elementToDelete", elementToDelete)
    
    const recipeIngredientsContainer = document.getElementById('new-recipe-ingredients')
    recipeIngredientsContainer.removeChild(elementToDelete);
    
  }

  function moveInstructionUp(clickedElement) {
    console.log("clickedElement", clickedElement)
    const inputElement = clickedElement.closest('.new-recipe-instruction-container').querySelector('input[name="instruction"]')
    const instructionValue = inputElement.value

    const instructionsHTML = document.getElementsByClassName('instruction')

    let instructions = []

    for (let i = 0; i < instructionsHTML.length; i++) {
      const instruction = instructionsHTML[i];
      instructions.push(instruction.value)
    }
    
    const arrayIndexToMoveUp = instructions.indexOf(instructionValue)
    if(arrayIndexToMoveUp === 0) return
    
    const CSSindexToMoveUp = (arrayIndexToMoveUp + 1)
    const CSSindexToMoveBelow = (CSSindexToMoveUp - 1)

    const elementToMoveUp = document.querySelector(`#new-recipe-instructions .new-recipe-instruction-container:nth-child(${CSSindexToMoveUp})`)
    const elementToMoveBelow = document.querySelector(`#new-recipe-instructions .new-recipe-instruction-container:nth-child(${CSSindexToMoveBelow})`)
    
    const recipeInstructionsContainer = document.getElementById('new-recipe-instructions')
    recipeInstructionsContainer.insertBefore(elementToMoveUp, elementToMoveBelow);
}

  function moveInstructionDown(clickedElement) {
    console.log("clickedElement", clickedElement)
    const inputElement = clickedElement.closest('.new-recipe-instruction-container').querySelector('input[name="instruction"]')
    const instructionValue = inputElement.value

    const instructionsHTML = document.getElementsByClassName('instruction')

    let instructions = []

    for (let i = 0; i < instructionsHTML.length; i++) {
      const instruction = instructionsHTML[i];
      instructions.push(instruction.value)
    }
    
    const arrayIndexToMoveDown = instructions.indexOf(instructionValue)
    
    const CSSindexToMoveDown = (arrayIndexToMoveDown + 1)
    const CSSindexToMoveAbove = (CSSindexToMoveDown + 1)

    if(CSSindexToMoveDown === instructions.length) return

    const elementToMoveDown = document.querySelector(`#new-recipe-instructions .new-recipe-instruction-container:nth-child(${CSSindexToMoveDown})`)
    const elementToMoveAbove = document.querySelector(`#new-recipe-instructions .new-recipe-instruction-container:nth-child(${CSSindexToMoveAbove})`)
    
    const recipeInstructionsContainer = document.getElementById('new-recipe-instructions')
    recipeInstructionsContainer.insertBefore(elementToMoveAbove, elementToMoveDown);
}

function deleteInstruction(clickedElement) {
  console.log("clickedElement", clickedElement)
  
  const inputElement = clickedElement.closest('.new-recipe-instruction-container').querySelector('input[name="instruction"]')
  console.log("inputElement", inputElement)

    const instructionValue = inputElement.value

    const instructionsHTML = document.getElementsByClassName('instruction')

    let instructions = []

    for (let i = 0; i < instructionsHTML.length; i++) {
      const instruction = instructionsHTML[i];
      instructions.push(instruction.value)
    }
    
    const arrayIndexToDelete = instructions.indexOf(instructionValue)    
    const CSSindexToDelete = (arrayIndexToDelete + 1)
    console.log("CSSindexToDelete", CSSindexToDelete)
    
    const elementToDelete = document.querySelector(`#new-recipe-instructions .new-recipe-instruction-container:nth-child(${CSSindexToDelete})`)
    console.log("elementToDelete", elementToDelete)
    
    const recipeInstructionsContainer = document.getElementById('new-recipe-instructions')
    recipeInstructionsContainer.removeChild(elementToDelete);
    
}

// Photo Upload
const photoForUpload = document.getElementById('photo-for-upload')
const previewImageLocation = document.getElementById('new-recipe-image-content')
const previewImage = document.createElement('img')


photoForUpload.addEventListener('change', function(event) {
  const currentPhotoElement = document.getElementById('new-image-placeholder')
  const placeholderPhotoElement = document.getElementById('no-image-placeholder')

  if(currentPhotoElement) {
    currentPhotoElement.remove()
  
  } else if(placeholderPhotoElement) {
    placeholderPhotoElement.remove()
  }
  
  var file = event.target.files[0]

  if (file) {
    let reader = new FileReader()

    reader.onload = function(e) {
      previewImage.id = 'new-recipe-uploaded-image'
      previewImage.src = e.target.result;
      previewImage.style.display = 'block';
    };

    reader.readAsDataURL(file);
    previewImageLocation.appendChild(previewImage)

    const recipeImageButtonsDiv = document.getElementById('new-recipe-image-buttons')
    const recipeImageDeleteButtonDiv = document.createElement('div')

    recipeImageDeleteButtonDiv.id = 'new-recipe-delete-photo-button-container'
    recipeImageDeleteButtonDiv.classList.add('new-recipe-photo-button-containers')

    const recipeImageDeleteButton = document.createElement('button')
      
    recipeImageDeleteButton.type = 'button'
    recipeImageDeleteButton.classList.add('reg-button')
    recipeImageDeleteButton.onclick = photoDelete
    recipeImageDeleteButton.textContent = 'Delete Photo'
      
    recipeImageDeleteButtonDiv.appendChild(recipeImageDeleteButton)
    recipeImageButtonsDiv.appendChild(recipeImageDeleteButtonDiv)

  } else {
    previewImage.src = '';
    previewImage.style.display = 'none';
  }

})



// }

function photoDelete() {
  const currentPhotoElement = document.getElementById('new-recipe-image')
  const uploadedPhotoElement = document.getElementById('new-recipe-uploaded-image')
  const recipeImageDeleteButtonDiv = document.getElementById('new-recipe-delete-photo-button-container')

  if(currentPhotoElement) {
    currentPhotoElement.remove()
    recipeImageDeleteButtonDiv.remove()
    
  } else if(uploadedPhotoElement) {
    uploadedPhotoElement.remove()
    recipeImageDeleteButtonDiv.remove()
  }

  const photoDiv = document.getElementById('new-recipe-image-content')
  
  const noImagePlaceholder = document.createElement('div')
  noImagePlaceholder.id = 'no-image-placeholder'
  noImagePlaceholder.classList.add('new-recipe-image')
  photoDiv.appendChild(noImagePlaceholder)
  
  const noImagePlaceholderDiv = document.getElementById('no-image-placeholder')
  
  const noImagePlaceholderOverlayH3 = document.createElement('h3')
  noImagePlaceholderOverlayH3.id = 'no-image-placeholder-overlay-h3'
  noImagePlaceholderOverlayH3.textContent = "No Photo Selected"
  noImagePlaceholderDiv.appendChild(noImagePlaceholderOverlayH3)

  const noImagePlaceholderOverlayP = document.createElement('p')
  noImagePlaceholderOverlayP.id = 'no-image-placeholder-overlay-p'
  noImagePlaceholderOverlayP.textContent = "We will generate something beautiful using the magic of AI!"
  noImagePlaceholderDiv.appendChild(noImagePlaceholderOverlayP)



}



  $(document).ready(function() {
    $('.expanding-text-input').on('input', function() {
        this.style.height = 'auto'
        this.style.height = (this.scrollHeight) + 'px';
    })
})






  // Get the page
  const showPage = document.getElementById('new-recipe');
  
  // Get the nav
  const nav = document.getElementById('nav');

  // Get the modal
  const modal = document.getElementById('new-recipe-modal');

  // Get the button that opens the modal
  const saveButton = document.getElementById('new-recipe-save-button');

  // When the user clicks the save button, open the modal
  saveButton.onclick = function() {
    nav.style.display = 'none';
    modal.style.display = 'flex';
  }
</script>


<%- include('../partials/footer') %>